// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


enum Role {
  ADMIN
  USER
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String    
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())

  carts  Cart[]
  orders Order[]
  reviews Review[]
}



model Product {
  id        Int      @id @default(autoincrement())
  name      String   
  category  String
  tags      String?  // comma‚Äêseparated tags
  stock     Int
  price     Float
  images    String[] 
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews Review[]
  ratingScore Float      @default(0)
}

model Cart {
  id        String      @id @default(uuid())
  userId    String      @unique
  user      User        @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
}

model Order {
  id        String       @id @default(uuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  items     OrderItem[]
  total     Float
  status    String       @default("pending")
  createdAt DateTime     @default(now())
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}



model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  comment   String
  rating    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
